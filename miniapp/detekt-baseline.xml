<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist></Blacklist>
  <Whitelist>
    <ID>ComplexMethod:MiniAppFileWriter.kt$MiniAppFileWriter$ fun writeResponseBodyToDisk(response: ResponseBody, appId: String, fileUrl: String)</ID>
    <ID>EndOfSentenceFormat:ContextModule.kt$ContextModule$ @AppScope @Provides fun provideContext(): Context</ID>
    <ID>ExpressionBodySyntax:ContextModule.kt$ContextModule$return CoreImpl.context!!</ID>
    <ID>ExpressionBodySyntax:DisplayerModule.kt$DisplayerModule$return MiniAppDisplayImpl()</ID>
    <ID>ExpressionBodySyntax:DownloadModule.kt$DownloadModule$return DownloadMiniAppImpl()</ID>
    <ID>ExpressionBodySyntax:DownloadModule.kt$DownloadModule$return DownloadScheduler()</ID>
    <ID>ExpressionBodySyntax:DownloadModule.kt$DownloadModule$return LocalUrlParser()</ID>
    <ID>ExpressionBodySyntax:DownloadModule.kt$DownloadModule$return MiniAppFileWriter()</ID>
    <ID>ExpressionBodySyntax:DownloadModule.kt$DownloadModule$return RetrofitClient()</ID>
    <ID>ExpressionBodySyntax:MiniAppDisplayImpl.kt$MiniAppDisplayImpl$return "file://$indexDir/miniapps/$miniAppId/$versionId/index.html"</ID>
    <ID>ForbiddenComment:DownloadMiniAppImpl.kt$DownloadMiniAppImpl$// TODO: Should validate endpoint and its format.</ID>
    <ID>ForbiddenComment:DownloadWorker.kt$DownloadWorker$// TODO: Remove this after BE is fixed.</ID>
    <ID>ForbiddenComment:DownloadWorkerTest.kt$DownloadWorkerTest$// TODO: Add more tests which includes network requests and logic in doWork().</ID>
    <ID>ForbiddenComment:LocalUrlParser.kt$LocalUrlParser$// TODO: Add URL validator for each method.</ID>
    <ID>ForbiddenComment:MiniAppDisplayImpl.kt$MiniAppDisplayImpl$// TODO: Download app.</ID>
    <ID>Indentation:</ID>
    <ID>LongMethod:DownloadWorker.kt$DownloadWorker$ override fun doWork(): Result</ID>
    <ID>LongMethod:MiniAppFileWriter.kt$MiniAppFileWriter$ fun writeResponseBodyToDisk(response: ResponseBody, appId: String, fileUrl: String)</ID>
    <ID>NestedBlockDepth:MiniAppFileWriter.kt$MiniAppFileWriter$ fun writeResponseBodyToDisk(response: ResponseBody, appId: String, fileUrl: String)</ID>
    <ID>NoWildcardImports:</ID>
    <ID>ReturnCount:DownloadWorker.kt$DownloadWorker$ override fun doWork(): Result</ID>
    <ID>WildcardImport:MiniAppFileWriter.kt$import java.io.*</ID>
  </Whitelist>
</SmellBaseline>
