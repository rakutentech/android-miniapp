apply from: '../config/android/library.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    buildToolsVersion = androidBuildTool
}

androidExtensions {
    experimental = true
}

// Prevents test code compiled into binary.
afterEvaluate {
    android.sourceSets.all { sourceSet ->
        if (!sourceSet.name.startsWith("test")) {
            sourceSet.kotlin.setSrcDirs([])
        }
    }
}

dependencies {
    compileOnly "javax.annotation:jsr250-api:$jsr250"

    implementation "androidx.core:core-ktx:$androidx_coreKtx"
    implementation "androidx.webkit:webkit:$webkit"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"

    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"

    kapt "com.rakuten.tech.mobile:manifest-config-processor:$manifest_config"
    implementation "com.rakuten.tech.mobile:manifest-config-annotations:$manifest_config"
    implementation "com.rakuten.tech.mobile.sdkutils:sdk-utils:$sdk_utils"

    testImplementation "androidx.test.ext:junit:$androidx_test_ext"
    testImplementation "org.mockito:mockito-android:$mockito"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.mockito:mockito-inline:$mockito_inline"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhrm_mockito_kotlin"
    testImplementation "org.amshove.kluent:kluent-android:$kluent_android"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines"
    testImplementation "org.robolectric:robolectric:$robolectric"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver"
}

apply from: "../config/quality/checkstyle/android.gradle"
apply from: '../config/quality/detekt/android.gradle'
dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.1.1"
}

apply from: '../config/quality/jacoco/android.gradle'
jacoco {
    toolVersion = "0.8.5"
}

apply from: '../gradle/documentation.gradle'
dokka {
    configuration {
        sourceRoot {
            path = "miniapp/src/main"
        }

        perPackageOption {
            prefix = "com.rakuten.tech.mobile.miniapp.legacy"
            suppress = true
        }
    }
}

apply from: '../config/publish/android.gradle'
publishing {
    publications {
        MiniApp(MavenPublication, androidArtifact())
    }
}

def isSnapshot = project.version.contains('-')
if (isSnapshot) {
    apply from: '../config/publish/artifactory.gradle'
} else {
    apply from: '../config/publish/bintray.gradle'
}
