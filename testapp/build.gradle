apply from: '../config/android/application.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    def property = { key ->
        return System.getenv(key) ?: (project.hasProperty(key) ? project."$key" : null)
    }

    defaultConfig {
        versionCode 1
        versionName project.version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Set signing config only if the keystore file exists
    def keystoreFile = file('release-keystore.jks')
    if (keystoreFile.exists()) {
        signingConfigs {
            release {
                keyAlias "$System.env.MINIAPP_RELEASE_KEY_ALIAS"
                keyPassword "$System.env.MINIAPP_RELEASE_KEY_PASSWORD"

                storeFile keystoreFile
                storePassword "$System.env.MINIAPP_KEYSTORE_PASSWORD"
            }
        }

        buildTypes.release {
            signingConfig signingConfigs.release
        }
    }

    def defaultAppName = "Mini App Sample"
    def debugManifestPlaceholders = [
            baseUrl                 : property("MINIAPP_SERVER_BASE_URL") ?: "https://www.example.com/",
            isPreviewMode           : property("IS_PREVIEW_MODE") ?: true,
            hostAppUserAgentInfo    : property("HOST_APP_UA_INFO") ?: "MiniApp Demo App/$project.version",
            projectId               : property("HOST_PROJECT_ID") ?: "test-host-project-id",
            subscriptionKey         : property("HOST_APP_SUBSCRIPTION_KEY") ?: "test-subs-key",
            adMobAppId              : property("ADMOB_APP_ID") ?: "",
            appName                 : defaultAppName + " DEBUG"
    ]
    def stagingManifestPlaceholders = debugManifestPlaceholders.clone()
    stagingManifestPlaceholders.appName = defaultAppName + " STG"
    def prodManifestPlaceholders = [
            baseUrl                 : property("MINIAPP_PROD_SERVER_BASE_URL") ?: "https://www.example.com/",
            isPreviewMode           : property("PROD_IS_PREVIEW_MODE") ?: true,
            hostAppUserAgentInfo    : property("HOST_APP_PROD_UA_INFO") ?: "MiniApp Demo App/$project.version",
            projectId               : property("HOST_PROJECT_PROD_ID") ?: "test-host-project-id",
            subscriptionKey         : property("HOST_APP_PROD_SUBSCRIPTION_KEY") ?: "test-subs-key",
            adMobAppId              : property("PROD_ADMOB_APP_ID") ?: "",
            appName                 : defaultAppName
    ]

    def buildVersion = System.getenv("CIRCLE_BUILD_NUM") ?: new Date().format('yyMMddHHmm')

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            resValue "string", "build_version", buildVersion
            resValue "string", "miniapp_sdk_version", project.version
            debuggable true
            minifyEnabled false

            manifestPlaceholders = debugManifestPlaceholders
        }
        release {
            resValue "string", "build_version", buildVersion
            resValue "string", "miniapp_sdk_version", project.version
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = prodManifestPlaceholders
        }
        staging {
            initWith release
            applicationIdSuffix '.staging'
            versionNameSuffix "-STG-build-$buildVersion"
            matchingFallbacks = ['release', 'debug']

            manifestPlaceholders = stagingManifestPlaceholders
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compileOnly "javax.annotation:jsr250-api:$jsr250"

    implementation project(':miniapp')
    implementation "androidx.appcompat:appcompat:$androidx_appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintLayout"
    implementation "androidx.core:core-ktx:$androidx_coreKtx"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle"
    implementation "androidx.activity:activity:$androidx_activity"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.google.code.gson:gson:$gson"

    implementation "com.github.bumptech.glide:glide:$glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_layout"
    implementation "androidx.recyclerview:recyclerview:$recyclerview"
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation "com.google.android.gms:play-services-ads:$google_ads"

    testImplementation "junit:junit:$junit"
}
