apply from: '../config/android/application.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

def property = { key ->
    return System.getenv(key) ?: (project.hasProperty(key) ? project."$key" : null)
}

def numProperty = { key ->
    return System.getenv(key) ?: (project.hasProperty(key) ? project."$key" : "0")
}

android {

    defaultConfig {
        versionCode 1
        versionName project.version
        buildConfigField "int", "ADDITIONAL_ANALYTICS_ACC", numProperty("ADDITIONAL_ANALYTICS_ACC")
        buildConfigField "int", "ADDITIONAL_ANALYTICS_AID", numProperty("ADDITIONAL_ANALYTICS_AID")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Set signing config only if the keystore file exists
    def keystoreFile = file('release-keystore.jks')
    if (keystoreFile.exists()) {
        signingConfigs {
            release {
                keyAlias "$System.env.MINIAPP_RELEASE_KEY_ALIAS"
                keyPassword "$System.env.MINIAPP_RELEASE_KEY_PASSWORD"

                storeFile keystoreFile
                storePassword "$System.env.MINIAPP_KEYSTORE_PASSWORD"
            }
        }

        buildTypes.release {
            signingConfig signingConfigs.release
        }
    }

    def defaultAppName = "Mini App Sample"
    def commonPlaceholders = [
            appCenterSecret         : property("APPCENTER_SECRET") ?: "",
            ratAcc                  : property("ANALYTICS_ACC") ?: "0",
            ratAid                  : property("ANALYTICS_AID") ?: "0"
    ]
    def debugManifestPlaceholders = [
            baseUrl                 : property("MINIAPP_SERVER_BASE_URL") ?: "https://www.example.com/",
            isPreviewMode           : property("IS_PREVIEW_MODE") ?: true,
            requireSignatureVerification : property("REQUIRE_SIGNATURE_VERIFICATION") ?: false,
            hostAppUserAgentInfo    : property("HOST_APP_UA_INFO") ?: "MiniApp Demo App/$project.version",
            projectId               : property("HOST_PROJECT_ID") ?: "test-host-project-id",
            subscriptionKey         : property("HOST_APP_SUBSCRIPTION_KEY") ?: "test-subs-key",
            adMobAppId              : property("ADMOB_APP_ID") ?: "",
            appName                 : defaultAppName + " DEBUG",
            ratEndpoint             : property("ANALYTICS_ENDPOINT") ?: "https://www.example.com/",
            sslPublicKey            : property("CERTIFICATE_PUBLIC_KEY") ?: "",
            sslPublicKeyBackup      : property("CERTIFICATE_PUBLIC_KEY_BACKUP") ?: "",
            enableH5Ads             : property("ENABLE_H5_ADS") ?: true,
            maxStorageSizeLimitInBytes : property("MAX_STORAGE_SIZE_LIMIT_IN_BYTES") ?: '52428800'
    ] + commonPlaceholders
    def stagingManifestPlaceholders = debugManifestPlaceholders.clone()
    stagingManifestPlaceholders.appName = defaultAppName + " STG"
    def prodManifestPlaceholders = [
            baseUrl                 : property("MINIAPP_PROD_SERVER_BASE_URL") ?: "https://www.example.com/",
            isPreviewMode           : property("PROD_IS_PREVIEW_MODE") ?: true,
            requireSignatureVerification : property("PROD_REQUIRE_SIGNATURE_VERIFICATION") ?: false,
            hostAppUserAgentInfo    : property("HOST_APP_PROD_UA_INFO") ?: "MiniApp Demo App/$project.version",
            projectId               : property("HOST_PROJECT_PROD_ID") ?: "test-host-project-id",
            subscriptionKey         : property("HOST_APP_PROD_SUBSCRIPTION_KEY") ?: "test-subs-key",
            adMobAppId              : property("PROD_ADMOB_APP_ID") ?: "",
            appName                 : defaultAppName,
            ratEndpoint             : property("PROD_ANALYTICS_ENDPOINT") ?: "https://www.example.com/",
            sslPublicKey            : property("PROD_CERTIFICATE_PUBLIC_KEY") ?: "",
            sslPublicKeyBackup      : property("PROD_CERTIFICATE_PUBLIC_KEY_BACKUP") ?: "",
            enableH5Ads             : property("ENABLE_H5_ADS") ?: true,
            maxStorageSizeLimitInBytes : property("MAX_STORAGE_SIZE_LIMIT_IN_BYTES") ?: '52428800',
    ] + commonPlaceholders

    def buildVersion = System.getenv("CIRCLE_BUILD_NUM") ?: new Date().format('yyMMddHHmm')

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            resValue "string", "build_version", buildVersion
            resValue "string", "miniapp_sdk_version", project.version
            resValue "string", "appcenter_secret", debugManifestPlaceholders.appCenterSecret
            resValue "string", "sslPublicKey", debugManifestPlaceholders.sslPublicKey
            resValue "string", "sslPublicKeyBackup", debugManifestPlaceholders.sslPublicKeyBackup
            resValue "string", "stagingBaseUrl", stagingManifestPlaceholders.baseUrl
            resValue "string", "stagingProjectId", stagingManifestPlaceholders.projectId
            resValue "string", "stagingSubscriptionKey", stagingManifestPlaceholders.subscriptionKey
            resValue "string", "prodBaseUrl", prodManifestPlaceholders.baseUrl
            resValue "string", "prodProjectId", prodManifestPlaceholders.projectId
            resValue "string", "prodSubscriptionKey", prodManifestPlaceholders.subscriptionKey
            debuggable true
            minifyEnabled false
            buildConfigField 'boolean', 'ENABLE_APPCENTER_CRASHLYTICS', 'false'

            manifestPlaceholders = debugManifestPlaceholders
        }
        release {
            resValue "string", "build_version", buildVersion
            resValue "string", "miniapp_sdk_version", project.version
            resValue "string", "appcenter_secret", prodManifestPlaceholders.appCenterSecret
            resValue "string", "sslPublicKey", prodManifestPlaceholders.sslPublicKey
            resValue "string", "sslPublicKeyBackup", prodManifestPlaceholders.sslPublicKeyBackup
            resValue "string", "stagingBaseUrl", stagingManifestPlaceholders.baseUrl
            resValue "string", "stagingProjectId", stagingManifestPlaceholders.projectId
            resValue "string", "stagingSubscriptionKey", stagingManifestPlaceholders.subscriptionKey
            resValue "string", "prodBaseUrl", prodManifestPlaceholders.baseUrl
            resValue "string", "prodProjectId", prodManifestPlaceholders.projectId
            resValue "string", "prodSubscriptionKey", prodManifestPlaceholders.subscriptionKey
            debuggable true
            minifyEnabled true
            shrinkResources true
            buildConfigField 'boolean', 'ENABLE_APPCENTER_CRASHLYTICS', 'true'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = prodManifestPlaceholders
        }
        staging {
            initWith release
            resValue "string", "sslPublicKey", stagingManifestPlaceholders.sslPublicKey
            resValue "string", "sslPublicKeyBackup", stagingManifestPlaceholders.sslPublicKeyBackup
            resValue "string", "stagingBaseUrl", stagingManifestPlaceholders.baseUrl
            resValue "string", "stagingProjectId", stagingManifestPlaceholders.projectId
            resValue "string", "stagingSubscriptionKey", stagingManifestPlaceholders.subscriptionKey
            resValue "string", "prodBaseUrl", prodManifestPlaceholders.baseUrl
            resValue "string", "prodProjectId", prodManifestPlaceholders.projectId
            resValue "string", "prodSubscriptionKey", prodManifestPlaceholders.subscriptionKey
            applicationIdSuffix '.staging'
            versionNameSuffix "-STG-build-$buildVersion"
            buildConfigField 'boolean', 'ENABLE_APPCENTER_CRASHLYTICS', 'true'
            matchingFallbacks = ['release', 'debug']

            manifestPlaceholders = stagingManifestPlaceholders
        }
        rc {
            initWith release
            resValue "string", "sslPublicKey", stagingManifestPlaceholders.sslPublicKey
            resValue "string", "sslPublicKeyBackup", stagingManifestPlaceholders.sslPublicKeyBackup
            resValue "string", "stagingBaseUrl", stagingManifestPlaceholders.baseUrl
            resValue "string", "stagingProjectId", stagingManifestPlaceholders.projectId
            resValue "string", "stagingSubscriptionKey", stagingManifestPlaceholders.subscriptionKey
            resValue "string", "prodBaseUrl", prodManifestPlaceholders.baseUrl
            resValue "string", "prodProjectId", prodManifestPlaceholders.projectId
            resValue "string", "prodSubscriptionKey", prodManifestPlaceholders.subscriptionKey
            applicationIdSuffix '.rc'
            versionNameSuffix "-RC-build-$buildVersion"
            buildConfigField 'boolean', 'ENABLE_APPCENTER_CRASHLYTICS', 'true'
            matchingFallbacks = ['release', 'debug']

            manifestPlaceholders = stagingManifestPlaceholders
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compileOnly "javax.annotation:jsr250-api:$jsr250"

    implementation project(':miniapp')
    implementation "androidx.appcompat:appcompat:$androidx_appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintLayout"
    implementation "androidx.core:core-ktx:$androidx_coreKtx"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_viewmodel"
    implementation "androidx.activity:activity-ktx:$androidx_activity"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.google.code.gson:gson:$gson"
    if (property("GITHUB_USERNAME") != null) {
        implementation "com.rakuten.tech.mobile.analytics:analytics:$analytics_sdk"
    } else {
        implementation project(':analytics')
    }
    implementation project(':admob-latest')

    implementation "com.github.bumptech.glide:glide:$glide"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_layout"
    implementation "androidx.recyclerview:recyclerview:$recyclerview"
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation "com.google.android.gms:play-services-ads:$google_ads"
    implementation "com.microsoft.appcenter:appcenter-crashes:$appCenterSdkVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.1"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.1"
    testImplementation "junit:junit:$junit"
}

// Some of our dependencies also use manifest-config-processor, but they use the old `com.rakutentech.mobile` version
configurations.all {
    exclude group: 'com.rakuten.tech.mobile', module: 'manifest-config-processor'
    exclude group: 'com.rakuten.tech.mobile', module: 'manifest-config-annotations'
}
